diff --git a/node_modules/react-native-notifications/lib/android/app/src/main/java/com/wix/reactnativenotifications/JSNotifyWhenKilledTask.java b/node_modules/react-native-notifications/lib/android/app/src/main/java/com/wix/reactnativenotifications/JSNotifyWhenKilledTask.java
new file mode 100644
index 0000000..fd6b29e
--- /dev/null
+++ b/node_modules/react-native-notifications/lib/android/app/src/main/java/com/wix/reactnativenotifications/JSNotifyWhenKilledTask.java
@@ -0,0 +1,74 @@
+package com.wix.reactnativenotifications;
+
+
+import android.app.ActivityManager;
+import android.app.ActivityManager.RunningAppProcessInfo;
+import android.content.Intent;
+import android.os.Bundle;
+import android.util.Log;
+
+import com.facebook.react.HeadlessJsTaskService;
+import com.facebook.react.ReactApplication;
+import com.facebook.react.ReactInstanceManager;
+import com.facebook.react.bridge.Arguments;
+import com.facebook.react.bridge.ReactApplicationContext;
+import com.facebook.react.bridge.ReactContext;
+import com.facebook.react.jstasks.HeadlessJsTaskConfig;
+
+import java.util.List;
+
+import javax.annotation.Nullable;
+
+public class JSNotifyWhenKilledTask extends HeadlessJsTaskService {
+    static final String TAG = "[JSNotifyWhenKilledTask]";
+
+    @Override
+    protected @Nullable
+    HeadlessJsTaskConfig getTaskConfig(Intent intent) {
+        Bundle extras = intent.getExtras();
+        
+        if (extras == null) return null;
+
+        for (String key : extras.keySet()) {
+            Object value = extras.get(key);
+            if (value == null) {
+                continue;
+            }
+            Log.d("[JSNotifyWhenKilledTask]", "[bundleItem]:" + String.format("%s %s (%s)", key,
+                    value.toString(), value.getClass().getName()));
+        }
+
+        if (this.isApplicationInForeground()) {
+            // sendToJS(extras);
+            return null;
+        }
+        return new HeadlessJsTaskConfig("JSNotifyWhenKilledTask", Arguments.fromBundle(extras), 0, false);
+    }
+
+    // public void sendToJS(Bundle bundle) {
+    //     ReactInstanceManager mReactInstanceManager = ((ReactApplication) getApplication()).getReactNativeHost().getReactInstanceManager();
+    //     ReactContext context = mReactInstanceManager.getCurrentReactContext();
+    //     RNPushNotificationJsDelivery jsDelivery = new RNPushNotificationJsDelivery((ReactApplicationContext) context);
+    //     jsDelivery.notifyNotificationAction(bundle);
+    // }
+
+    public boolean isApplicationInForeground() {
+        ActivityManager activityManager = (ActivityManager) this.getSystemService(ACTIVITY_SERVICE);
+        List<RunningAppProcessInfo> processInfos = activityManager.getRunningAppProcesses();
+        if (processInfos != null) {
+            for (RunningAppProcessInfo processInfo : processInfos) {
+                if (processInfo.processName.equals(getApplication().getPackageName())) {
+                    if (processInfo.importance == RunningAppProcessInfo.IMPORTANCE_FOREGROUND) {
+                        for (String d : processInfo.pkgList) {
+                            //TelecomManager telM = (TelecomManager) getApplicationContext().getSystemService(Context.TELECOM_SERVICE);
+                            //boolean isInCall = telM.isInCall();
+                            //return !isInCall;
+                            return true;
+                        }
+                    }
+                }
+            }
+        }
+        return false;
+    }
+}
diff --git a/node_modules/react-native-notifications/lib/android/app/src/main/java/com/wix/reactnativenotifications/core/AppLifecycleFacade.java b/node_modules/react-native-notifications/lib/android/app/src/main/java/com/wix/reactnativenotifications/core/AppLifecycleFacade.java
index 0ce7b98..d1bc47b 100644
--- a/node_modules/react-native-notifications/lib/android/app/src/main/java/com/wix/reactnativenotifications/core/AppLifecycleFacade.java
+++ b/node_modules/react-native-notifications/lib/android/app/src/main/java/com/wix/reactnativenotifications/core/AppLifecycleFacade.java
@@ -13,6 +13,7 @@ public interface AppLifecycleFacade {
     ReactContext getRunningReactContext();
     boolean isAppVisible();
     boolean isAppDestroyed();
+    boolean isAppStarted();
     void addVisibilityListener(AppVisibilityListener listener);
     void removeVisibilityListener(AppVisibilityListener listener);
 }
diff --git a/node_modules/react-native-notifications/lib/android/app/src/main/java/com/wix/reactnativenotifications/core/ReactAppLifecycleFacade.java b/node_modules/react-native-notifications/lib/android/app/src/main/java/com/wix/reactnativenotifications/core/ReactAppLifecycleFacade.java
index 91c7141..4809320 100644
--- a/node_modules/react-native-notifications/lib/android/app/src/main/java/com/wix/reactnativenotifications/core/ReactAppLifecycleFacade.java
+++ b/node_modules/react-native-notifications/lib/android/app/src/main/java/com/wix/reactnativenotifications/core/ReactAppLifecycleFacade.java
@@ -16,6 +16,7 @@ public class ReactAppLifecycleFacade implements AppLifecycleFacade {
     private ReactContext mReactContext;
     private boolean mIsVisible;
     private boolean mIsDestroyed;
+    private boolean mIsStarted;
     private Set<AppVisibilityListener> mListeners = new CopyOnWriteArraySet<>();
 
     public void init(ReactContext reactContext) {
@@ -70,6 +71,11 @@ public class ReactAppLifecycleFacade implements AppLifecycleFacade {
         return mIsDestroyed;
     }
 
+    @Override
+    public boolean isAppStarted() {
+        return mIsStarted;
+    }
+
     @Override
     public void addVisibilityListener(AppVisibilityListener listener) {
         mListeners.add(listener);
diff --git a/node_modules/react-native-notifications/lib/android/app/src/main/java/com/wix/reactnativenotifications/core/notification/PushNotification.java b/node_modules/react-native-notifications/lib/android/app/src/main/java/com/wix/reactnativenotifications/core/notification/PushNotification.java
index 54a5fb8..3a055ad 100644
--- a/node_modules/react-native-notifications/lib/android/app/src/main/java/com/wix/reactnativenotifications/core/notification/PushNotification.java
+++ b/node_modules/react-native-notifications/lib/android/app/src/main/java/com/wix/reactnativenotifications/core/notification/PushNotification.java
@@ -17,6 +17,7 @@ import com.wix.reactnativenotifications.core.AppLifecycleFacadeHolder;
 import com.wix.reactnativenotifications.core.InitialNotificationHolder;
 import com.wix.reactnativenotifications.core.JsIOHelper;
 import com.wix.reactnativenotifications.core.NotificationIntentAdapter;
+import com.wix.reactnativenotifications.JSNotifyWhenKilledTask;
 
 import static com.wix.reactnativenotifications.Defs.NOTIFICATION_OPENED_EVENT_NAME;
 import static com.wix.reactnativenotifications.Defs.NOTIFICATION_RECEIVED_EVENT_NAME;
@@ -64,7 +65,13 @@ public class PushNotification implements IPushNotification {
     public void onReceived() throws InvalidNotificationException {
         if (!mAppLifecycleFacade.isAppVisible()) {
             postNotification(null);
-            notifyReceivedBackgroundToJS();
+            if (!mAppLifecycleFacade.isAppStarted()) {
+                if (mNotificationProps.isDataOnlyPushNotification()) {
+                    notifyReceivedKilledToJS();
+                }
+            } else {
+                notifyReceivedBackgroundToJS();
+            }
         } else {
             notifyReceivedToJS();
         }
@@ -205,6 +212,13 @@ public class PushNotification implements IPushNotification {
         mJsIOHelper.sendEventToJS(NOTIFICATION_RECEIVED_BACKGROUND_EVENT_NAME, mNotificationProps.asBundle(), mAppLifecycleFacade.getRunningReactContext());
     }
 
+    private void notifyReceivedKilledToJS() {
+        Bundle bundle = new Bundle(mNotificationProps.asBundle());
+        Intent service = new Intent(mContext.getApplicationContext(), JSNotifyWhenKilledTask.class);
+        service.putExtras(bundle);
+        mContext.getApplicationContext().startService(service);
+    }
+
     private void notifyOpenedToJS() {
         Bundle response = new Bundle();
         response.putBundle("notification", mNotificationProps.asBundle());